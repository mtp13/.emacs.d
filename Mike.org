* visual tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (delete-selection-mode t)
  (transient-mark-mode t)
  (setq tab-width 4)
  (fset 'yes-or-no-p 'y-or-n-p)
;  (show-paren-mode 1)
#+END_SRC

* keyboard tweaks
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "RET") 'newline-and-indent)
  (define-key global-map (kbd "M-/") 'hippie-expand)
  (setq mac-option-modifier 'super)
  (setq mac-command-modifier 'meta)
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC
* Change frame name of emacs
#+BEGIN_SRC emacs-lisp
(setq frame-title-format
  '("Emacs - " (buffer-file-name "%f"
    (dired-directory dired-directory "%b"))))
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t
    )
#+END_SRC

* which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish (which-key-mode)
    :config
    (which-key-mode)
    )
#+END_SRC

* org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0))))))
#+END_SRC

* themes
#+BEGIN_SRC emacs-lisp
  (use-package leuven-theme
    :ensure t
    :config (load-theme 'leuven t))

    (set-default-font "Consolas 16")
#+END_SRC

* ivy/counsel/swiper
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind ("C-x b" . ivy-switch-buffer)
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    )

  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line))
    )

  (use-package swiper
    :ensure t
    :config
    :bind
    (("C-s"       .       swiper)
     ("C-c C-r"   .       ivy-resume)
     ("<f6>"      .       ivy-resume)
     ("M-x"       .       counsel-M-x)
     ("C-x C-f"   .       counsel-find-file)
     ("<f1> f"    .       counsel-describe-function)
     ("<f1> v"    .       counsel-describe-variable)
     ("<f1> l"    .       counsel-load-library)
     ("<f2> i"    .       counsel-info-lookup-symbol)
     ("<f2> u"    .       counsel-unicode-char)
     ("C-c g"     .       counsel-git)
     ("C-c j"     .       counsel-git-grep)
     ("C-c k"     .       counsel-ag)
     ("C-x l"     .       counsel-locate)
     ("C-S-o"     .       counsel-rhythmbox)
     ("C-r"       .       counsel-expression-history))
    )
#+END_SRC

* company-mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish (company-mode)
    :config
    (global-company-mode))
#+END_SRC

* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
    (setq global-magit-file-mode t)
    )
#+END_SRC


* smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish (smartparens-mode)
    :config 
    (require 'smartparens-html)
    (require 'smartparens-python)
    (require 'smartparens-ruby)
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)
    )
#+END_SRC
